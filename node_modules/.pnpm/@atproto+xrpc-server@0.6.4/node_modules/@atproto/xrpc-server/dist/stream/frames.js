"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorFrame = exports.MessageFrame = exports.Frame = void 0;
const uint8arrays = __importStar(require("uint8arrays"));
const common_1 = require("@atproto/common");
const types_1 = require("./types");
class Frame {
    constructor() {
        Object.defineProperty(this, "body", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    get op() {
        return this.header.op;
    }
    toBytes() {
        return uint8arrays.concat([(0, common_1.cborEncode)(this.header), (0, common_1.cborEncode)(this.body)]);
    }
    isMessage() {
        return this.op === types_1.FrameType.Message;
    }
    isError() {
        return this.op === types_1.FrameType.Error;
    }
    static fromBytes(bytes) {
        const decoded = (0, common_1.cborDecodeMulti)(bytes);
        if (decoded.length > 2) {
            throw new Error('Too many CBOR data items in frame');
        }
        const header = decoded[0];
        let body = kUnset;
        if (decoded.length > 1) {
            body = decoded[1];
        }
        const parsedHeader = types_1.frameHeader.safeParse(header);
        if (!parsedHeader.success) {
            throw new Error(`Invalid frame header: ${parsedHeader.error.message}`);
        }
        if (body === kUnset) {
            throw new Error('Missing frame body');
        }
        const frameOp = parsedHeader.data.op;
        if (frameOp === types_1.FrameType.Message) {
            return new MessageFrame(body, {
                type: parsedHeader.data.t,
            });
        }
        else if (frameOp === types_1.FrameType.Error) {
            const parsedBody = types_1.errorFrameBody.safeParse(body);
            if (!parsedBody.success) {
                throw new Error(`Invalid error frame body: ${parsedBody.error.message}`);
            }
            return new ErrorFrame(parsedBody.data);
        }
        else {
            const exhaustiveCheck = frameOp;
            throw new Error(`Unknown frame op: ${exhaustiveCheck}`);
        }
    }
}
exports.Frame = Frame;
class MessageFrame extends Frame {
    constructor(body, opts) {
        super();
        Object.defineProperty(this, "header", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "body", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.header =
            opts?.type !== undefined
                ? { op: types_1.FrameType.Message, t: opts?.type }
                : { op: types_1.FrameType.Message };
        this.body = body;
    }
    get type() {
        return this.header.t;
    }
}
exports.MessageFrame = MessageFrame;
class ErrorFrame extends Frame {
    constructor(body) {
        super();
        Object.defineProperty(this, "header", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "body", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.header = { op: types_1.FrameType.Error };
        this.body = body;
    }
    get code() {
        return this.body.error;
    }
    get message() {
        return this.body.message;
    }
}
exports.ErrorFrame = ErrorFrame;
const kUnset = Symbol('unset');
//# sourceMappingURL=frames.js.map