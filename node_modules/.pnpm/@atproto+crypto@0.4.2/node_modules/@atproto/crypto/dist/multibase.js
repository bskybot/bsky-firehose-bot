"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bytesToMultibase = exports.multibaseToBytes = void 0;
const uint8arrays = __importStar(require("uint8arrays"));
const multibaseToBytes = (mb) => {
    const base = mb[0];
    const key = mb.slice(1);
    switch (base) {
        case 'f':
            return uint8arrays.fromString(key, 'base16');
        case 'F':
            return uint8arrays.fromString(key, 'base16upper');
        case 'b':
            return uint8arrays.fromString(key, 'base32');
        case 'B':
            return uint8arrays.fromString(key, 'base32upper');
        case 'z':
            return uint8arrays.fromString(key, 'base58btc');
        case 'm':
            return uint8arrays.fromString(key, 'base64');
        case 'u':
            return uint8arrays.fromString(key, 'base64url');
        case 'U':
            return uint8arrays.fromString(key, 'base64urlpad');
        default:
            throw new Error(`Unsupported multibase: :${mb}`);
    }
};
exports.multibaseToBytes = multibaseToBytes;
const bytesToMultibase = (mb, encoding) => {
    switch (encoding) {
        case 'base16':
            return 'f' + uint8arrays.toString(mb, encoding);
        case 'base16upper':
            return 'F' + uint8arrays.toString(mb, encoding);
        case 'base32':
            return 'b' + uint8arrays.toString(mb, encoding);
        case 'base32upper':
            return 'B' + uint8arrays.toString(mb, encoding);
        case 'base58btc':
            return 'z' + uint8arrays.toString(mb, encoding);
        case 'base64':
            return 'm' + uint8arrays.toString(mb, encoding);
        case 'base64url':
            return 'u' + uint8arrays.toString(mb, encoding);
        case 'base64urlpad':
            return 'U' + uint8arrays.toString(mb, encoding);
        default:
            throw new Error(`Unsupported multibase: :${mb}`);
    }
};
exports.bytesToMultibase = bytesToMultibase;
//# sourceMappingURL=multibase.js.map