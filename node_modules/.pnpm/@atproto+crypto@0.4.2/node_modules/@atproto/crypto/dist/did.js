"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatDidKey = exports.parseDidKey = exports.formatMultikey = exports.parseMultikey = void 0;
const uint8arrays = __importStar(require("uint8arrays"));
const const_1 = require("./const");
const plugins_1 = __importDefault(require("./plugins"));
const utils_1 = require("./utils");
const parseMultikey = (multikey) => {
    const prefixedBytes = (0, utils_1.extractPrefixedBytes)(multikey);
    const plugin = plugins_1.default.find((p) => (0, utils_1.hasPrefix)(prefixedBytes, p.prefix));
    if (!plugin) {
        throw new Error('Unsupported key type');
    }
    const keyBytes = plugin.decompressPubkey(prefixedBytes.slice(plugin.prefix.length));
    return {
        jwtAlg: plugin.jwtAlg,
        keyBytes,
    };
};
exports.parseMultikey = parseMultikey;
const formatMultikey = (jwtAlg, keyBytes) => {
    const plugin = plugins_1.default.find((p) => p.jwtAlg === jwtAlg);
    if (!plugin) {
        throw new Error('Unsupported key type');
    }
    const prefixedBytes = uint8arrays.concat([
        plugin.prefix,
        plugin.compressPubkey(keyBytes),
    ]);
    return (const_1.BASE58_MULTIBASE_PREFIX + uint8arrays.toString(prefixedBytes, 'base58btc'));
};
exports.formatMultikey = formatMultikey;
const parseDidKey = (did) => {
    const multikey = (0, utils_1.extractMultikey)(did);
    return (0, exports.parseMultikey)(multikey);
};
exports.parseDidKey = parseDidKey;
const formatDidKey = (jwtAlg, keyBytes) => {
    return const_1.DID_KEY_PREFIX + (0, exports.formatMultikey)(jwtAlg, keyBytes);
};
exports.formatDidKey = formatDidKey;
//# sourceMappingURL=did.js.map