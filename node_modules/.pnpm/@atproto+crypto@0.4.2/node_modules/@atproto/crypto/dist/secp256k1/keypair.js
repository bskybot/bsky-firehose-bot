"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secp256k1Keypair = void 0;
const secp256k1_1 = require("@noble/curves/secp256k1");
const sha256_1 = require("@noble/hashes/sha256");
const uint8arrays_1 = require("uint8arrays");
const const_1 = require("../const");
const did = __importStar(require("../did"));
class Secp256k1Keypair {
    constructor(privateKey, exportable) {
        Object.defineProperty(this, "privateKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: privateKey
        });
        Object.defineProperty(this, "exportable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: exportable
        });
        Object.defineProperty(this, "jwtAlg", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: const_1.SECP256K1_JWT_ALG
        });
        Object.defineProperty(this, "publicKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.publicKey = secp256k1_1.secp256k1.getPublicKey(privateKey);
    }
    static async create(opts) {
        const { exportable = false } = opts || {};
        const privKey = secp256k1_1.secp256k1.utils.randomPrivateKey();
        return new Secp256k1Keypair(privKey, exportable);
    }
    static async import(privKey, opts) {
        const { exportable = false } = opts || {};
        const privKeyBytes = typeof privKey === 'string' ? (0, uint8arrays_1.fromString)(privKey, 'hex') : privKey;
        return new Secp256k1Keypair(privKeyBytes, exportable);
    }
    publicKeyBytes() {
        return this.publicKey;
    }
    publicKeyStr(encoding = 'base64pad') {
        return (0, uint8arrays_1.toString)(this.publicKey, encoding);
    }
    did() {
        return did.formatDidKey(this.jwtAlg, this.publicKey);
    }
    async sign(msg) {
        const msgHash = await (0, sha256_1.sha256)(msg);
        // return raw 64 byte sig not DER-encoded
        const sig = await secp256k1_1.secp256k1.sign(msgHash, this.privateKey, { lowS: true });
        return sig.toCompactRawBytes();
    }
    async export() {
        if (!this.exportable) {
            throw new Error('Private key is not exportable');
        }
        return this.privateKey;
    }
}
exports.Secp256k1Keypair = Secp256k1Keypair;
exports.default = Secp256k1Keypair;
//# sourceMappingURL=keypair.js.map