"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCompactFormat = exports.verifySig = exports.verifyDidSig = void 0;
const secp256k1_1 = require("@noble/curves/secp256k1");
const sha256_1 = require("@noble/hashes/sha256");
const ui8 = __importStar(require("uint8arrays"));
const const_1 = require("../const");
const utils_1 = require("../utils");
const verifyDidSig = async (did, data, sig, opts) => {
    const prefixedBytes = (0, utils_1.extractPrefixedBytes)((0, utils_1.extractMultikey)(did));
    if (!(0, utils_1.hasPrefix)(prefixedBytes, const_1.SECP256K1_DID_PREFIX)) {
        throw new Error(`Not a secp256k1 did:key: ${did}`);
    }
    const keyBytes = prefixedBytes.slice(const_1.SECP256K1_DID_PREFIX.length);
    return (0, exports.verifySig)(keyBytes, data, sig, opts);
};
exports.verifyDidSig = verifyDidSig;
const verifySig = async (publicKey, data, sig, opts) => {
    const allowMalleable = opts?.allowMalleableSig ?? false;
    const msgHash = await (0, sha256_1.sha256)(data);
    // parse as compact sig to prevent signature malleability
    // library supports sigs in 2 different formats: https://github.com/paulmillr/noble-curves/issues/99
    if (!allowMalleable && !(0, exports.isCompactFormat)(sig)) {
        return false;
    }
    return secp256k1_1.secp256k1.verify(sig, msgHash, publicKey, {
        lowS: !allowMalleable,
    });
};
exports.verifySig = verifySig;
const isCompactFormat = (sig) => {
    try {
        const parsed = secp256k1_1.secp256k1.Signature.fromCompact(sig);
        return ui8.equals(parsed.toCompactRawBytes(), sig);
    }
    catch {
        return false;
    }
};
exports.isCompactFormat = isCompactFormat;
//# sourceMappingURL=operations.js.map