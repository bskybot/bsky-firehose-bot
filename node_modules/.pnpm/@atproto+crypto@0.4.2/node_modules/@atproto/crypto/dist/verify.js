"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifySignatureUtf8 = exports.verifySignature = void 0;
const uint8arrays = __importStar(require("uint8arrays"));
const did_1 = require("./did");
const plugins_1 = __importDefault(require("./plugins"));
const verifySignature = (didKey, data, sig, opts) => {
    const parsed = (0, did_1.parseDidKey)(didKey);
    if (opts?.jwtAlg && opts.jwtAlg !== parsed.jwtAlg) {
        throw new Error(`Expected key alg ${opts.jwtAlg}, got ${parsed.jwtAlg}`);
    }
    const plugin = plugins_1.default.find((p) => p.jwtAlg === parsed.jwtAlg);
    if (!plugin) {
        throw new Error(`Unsupported signature alg: ${parsed.jwtAlg}`);
    }
    return plugin.verifySignature(didKey, data, sig, opts);
};
exports.verifySignature = verifySignature;
const verifySignatureUtf8 = async (didKey, data, sig, opts) => {
    const dataBytes = uint8arrays.fromString(data, 'utf8');
    const sigBytes = uint8arrays.fromString(sig, 'base64url');
    return (0, exports.verifySignature)(didKey, dataBytes, sigBytes, opts);
};
exports.verifySignatureUtf8 = verifySignatureUtf8;
//# sourceMappingURL=verify.js.map