"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidResolver = void 0;
const web_resolver_1 = require("./web-resolver");
const plc_resolver_1 = require("./plc-resolver");
const base_resolver_1 = __importDefault(require("./base-resolver"));
const errors_1 = require("../errors");
class DidResolver extends base_resolver_1.default {
    constructor(opts) {
        super(opts.didCache);
        Object.defineProperty(this, "methods", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        const { timeout = 3000, plcUrl = 'https://plc.directory' } = opts;
        // do not pass cache to sub-methods or we will be double caching
        this.methods = {
            plc: new plc_resolver_1.DidPlcResolver(plcUrl, timeout),
            web: new web_resolver_1.DidWebResolver(timeout),
        };
    }
    async resolveNoCheck(did) {
        const split = did.split(':');
        if (split[0] !== 'did') {
            throw new errors_1.PoorlyFormattedDidError(did);
        }
        const method = this.methods[split[1]];
        if (!method) {
            throw new errors_1.UnsupportedDidMethodError(did);
        }
        return method.resolveNoCheck(did);
    }
}
exports.DidResolver = DidResolver;
exports.default = DidResolver;
//# sourceMappingURL=did-resolver.js.map