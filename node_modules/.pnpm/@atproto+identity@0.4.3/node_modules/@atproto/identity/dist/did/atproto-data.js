"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureAtprotoKey = exports.ensureAtpDocument = exports.parseToAtprotoDocument = exports.getDidKeyFromMultibase = exports.getKey = exports.getNotif = exports.getFeedGen = exports.getPds = exports.getHandle = exports.getDid = void 0;
const crypto = __importStar(require("@atproto/crypto"));
const common_web_1 = require("@atproto/common-web");
Object.defineProperty(exports, "getDid", { enumerable: true, get: function () { return common_web_1.getDid; } });
Object.defineProperty(exports, "getHandle", { enumerable: true, get: function () { return common_web_1.getHandle; } });
Object.defineProperty(exports, "getPds", { enumerable: true, get: function () { return common_web_1.getPdsEndpoint; } });
Object.defineProperty(exports, "getFeedGen", { enumerable: true, get: function () { return common_web_1.getFeedGenEndpoint; } });
Object.defineProperty(exports, "getNotif", { enumerable: true, get: function () { return common_web_1.getNotifEndpoint; } });
const getKey = (doc) => {
    const key = (0, common_web_1.getSigningKey)(doc);
    if (!key)
        return undefined;
    return (0, exports.getDidKeyFromMultibase)(key);
};
exports.getKey = getKey;
const getDidKeyFromMultibase = (key) => {
    const keyBytes = crypto.multibaseToBytes(key.publicKeyMultibase);
    let didKey = undefined;
    if (key.type === 'EcdsaSecp256r1VerificationKey2019') {
        didKey = crypto.formatDidKey(crypto.P256_JWT_ALG, keyBytes);
    }
    else if (key.type === 'EcdsaSecp256k1VerificationKey2019') {
        didKey = crypto.formatDidKey(crypto.SECP256K1_JWT_ALG, keyBytes);
    }
    else if (key.type === 'Multikey') {
        const parsed = crypto.parseMultikey(key.publicKeyMultibase);
        didKey = crypto.formatDidKey(parsed.jwtAlg, parsed.keyBytes);
    }
    return didKey;
};
exports.getDidKeyFromMultibase = getDidKeyFromMultibase;
const parseToAtprotoDocument = (doc) => {
    const did = (0, common_web_1.getDid)(doc);
    return {
        did,
        signingKey: (0, exports.getKey)(doc),
        handle: (0, common_web_1.getHandle)(doc),
        pds: (0, common_web_1.getPdsEndpoint)(doc),
    };
};
exports.parseToAtprotoDocument = parseToAtprotoDocument;
const ensureAtpDocument = (doc) => {
    const { did, signingKey, handle, pds } = (0, exports.parseToAtprotoDocument)(doc);
    if (!did) {
        throw new Error(`Could not parse id from doc: ${doc}`);
    }
    if (!signingKey) {
        throw new Error(`Could not parse signingKey from doc: ${doc}`);
    }
    if (!handle) {
        throw new Error(`Could not parse handle from doc: ${doc}`);
    }
    if (!pds) {
        throw new Error(`Could not parse pds from doc: ${doc}`);
    }
    return { did, signingKey, handle, pds };
};
exports.ensureAtpDocument = ensureAtpDocument;
const ensureAtprotoKey = (doc) => {
    const { signingKey } = (0, exports.parseToAtprotoDocument)(doc);
    if (!signingKey) {
        throw new Error(`Could not parse signingKey from doc: ${doc}`);
    }
    return signingKey;
};
exports.ensureAtprotoKey = ensureAtprotoKey;
//# sourceMappingURL=atproto-data.js.map