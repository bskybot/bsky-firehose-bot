"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidWebResolver = exports.DOC_PATH = void 0;
const axios_1 = __importStar(require("axios"));
const base_resolver_1 = __importDefault(require("./base-resolver"));
const errors_1 = require("../errors");
exports.DOC_PATH = '/.well-known/did.json';
class DidWebResolver extends base_resolver_1.default {
    constructor(timeout, cache) {
        super(cache);
        Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: timeout
        });
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cache
        });
    }
    async resolveNoCheck(did) {
        const parsedId = did.split(':').slice(2).join(':');
        const parts = parsedId.split(':').map(decodeURIComponent);
        let path;
        if (parts.length < 1) {
            throw new errors_1.PoorlyFormattedDidError(did);
        }
        else if (parts.length === 1) {
            path = parts[0] + exports.DOC_PATH;
        }
        else {
            // how we *would* resolve a did:web with path, if atproto supported it
            //path = parts.join('/') + '/did.json'
            throw new errors_1.UnsupportedDidWebPathError(did);
        }
        const url = new URL(`https://${path}`);
        if (url.hostname === 'localhost') {
            url.protocol = 'http';
        }
        try {
            const res = await axios_1.default.get(url.toString(), {
                responseType: 'json',
                timeout: this.timeout,
            });
            return res.data;
        }
        catch (err) {
            if (err instanceof axios_1.AxiosError && err.response) {
                return null; // Positively not found, versus due to e.g. network error
            }
            throw err;
        }
    }
}
exports.DidWebResolver = DidWebResolver;
//# sourceMappingURL=web-resolver.js.map