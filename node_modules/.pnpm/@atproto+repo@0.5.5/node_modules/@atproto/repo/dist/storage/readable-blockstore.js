"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadableBlockstore = void 0;
const error_1 = require("../error");
const parse = __importStar(require("../parse"));
const util_1 = require("../util");
class ReadableBlockstore {
    async attemptRead(cid, def) {
        const bytes = await this.getBytes(cid);
        if (!bytes)
            return null;
        return parse.parseObjByDef(bytes, cid, def);
    }
    async readObjAndBytes(cid, def) {
        const read = await this.attemptRead(cid, def);
        if (!read) {
            throw new error_1.MissingBlockError(cid, def.name);
        }
        return read;
    }
    async readObj(cid, def) {
        const obj = await this.readObjAndBytes(cid, def);
        return obj.obj;
    }
    async attemptReadRecord(cid) {
        try {
            return await this.readRecord(cid);
        }
        catch {
            return null;
        }
    }
    async readRecord(cid) {
        const bytes = await this.getBytes(cid);
        if (!bytes) {
            throw new error_1.MissingBlockError(cid);
        }
        return (0, util_1.cborToLexRecord)(bytes);
    }
}
exports.ReadableBlockstore = ReadableBlockstore;
exports.default = ReadableBlockstore;
//# sourceMappingURL=readable-blockstore.js.map