"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadableRepo = void 0;
const types_1 = require("./types");
const mst_1 = require("./mst");
const logger_1 = __importDefault(require("./logger"));
const util = __importStar(require("./util"));
const parse = __importStar(require("./parse"));
const error_1 = require("./error");
class ReadableRepo {
    constructor(params) {
        Object.defineProperty(this, "storage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "commit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.storage = params.storage;
        this.data = params.data;
        this.commit = params.commit;
        this.cid = params.cid;
    }
    static async load(storage, commitCid) {
        const commit = await storage.readObj(commitCid, types_1.def.versionedCommit);
        const data = await mst_1.MST.load(storage, commit.data);
        logger_1.default.info({ did: commit.did }, 'loaded repo for');
        return new ReadableRepo({
            storage,
            data,
            commit: util.ensureV3Commit(commit),
            cid: commitCid,
        });
    }
    get did() {
        return this.commit.did;
    }
    get version() {
        return this.commit.version;
    }
    async *walkRecords(from) {
        for await (const leaf of this.data.walkLeavesFrom(from ?? '')) {
            const { collection, rkey } = util.parseDataKey(leaf.key);
            const record = await this.storage.readRecord(leaf.value);
            yield { collection, rkey, cid: leaf.value, record };
        }
    }
    async getRecord(collection, rkey) {
        const dataKey = collection + '/' + rkey;
        const cid = await this.data.get(dataKey);
        if (!cid)
            return null;
        return this.storage.readObj(cid, types_1.def.unknown);
    }
    async getContents() {
        const entries = await this.data.list();
        const cids = entries.map((e) => e.value);
        const { blocks, missing } = await this.storage.getBlocks(cids);
        if (missing.length > 0) {
            throw new error_1.MissingBlocksError('getContents record', missing);
        }
        const contents = {};
        for (const entry of entries) {
            const { collection, rkey } = util.parseDataKey(entry.key);
            contents[collection] ?? (contents[collection] = {});
            const parsed = await parse.getAndParseRecord(blocks, entry.value);
            contents[collection][rkey] = parsed.record;
        }
        return contents;
    }
}
exports.ReadableRepo = ReadableRepo;
exports.default = ReadableRepo;
//# sourceMappingURL=readable-repo.js.map