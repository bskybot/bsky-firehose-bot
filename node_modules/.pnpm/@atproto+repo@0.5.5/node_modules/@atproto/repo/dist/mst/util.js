"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidMstKeyError = exports.ensureValidMstKey = exports.isValidChars = exports.validCharsRegex = exports.isValidMstKey = exports.cidForEntries = exports.countPrefixLen = exports.serializeNodeData = exports.deserializeNodeData = exports.layerForEntries = exports.leadingZerosOnHash = void 0;
const uint8arrays = __importStar(require("uint8arrays"));
const crypto_1 = require("@atproto/crypto");
const mst_1 = require("./mst");
const common_1 = require("@atproto/common");
const leadingZerosOnHash = async (key) => {
    const hash = await (0, crypto_1.sha256)(key);
    let leadingZeros = 0;
    for (let i = 0; i < hash.length; i++) {
        const byte = hash[i];
        if (byte < 64)
            leadingZeros++;
        if (byte < 16)
            leadingZeros++;
        if (byte < 4)
            leadingZeros++;
        if (byte === 0) {
            leadingZeros++;
        }
        else {
            break;
        }
    }
    return leadingZeros;
};
exports.leadingZerosOnHash = leadingZerosOnHash;
const layerForEntries = async (entries) => {
    const firstLeaf = entries.find((entry) => entry.isLeaf());
    if (!firstLeaf || firstLeaf.isTree())
        return null;
    return await (0, exports.leadingZerosOnHash)(firstLeaf.key);
};
exports.layerForEntries = layerForEntries;
const deserializeNodeData = async (storage, data, opts) => {
    const { layer } = opts || {};
    const entries = [];
    if (data.l !== null) {
        entries.push(await mst_1.MST.load(storage, data.l, {
            layer: layer ? layer - 1 : undefined,
        }));
    }
    let lastKey = '';
    for (const entry of data.e) {
        const keyStr = uint8arrays.toString(entry.k, 'ascii');
        const key = lastKey.slice(0, entry.p) + keyStr;
        (0, exports.ensureValidMstKey)(key);
        entries.push(new mst_1.Leaf(key, entry.v));
        lastKey = key;
        if (entry.t !== null) {
            entries.push(await mst_1.MST.load(storage, entry.t, {
                layer: layer ? layer - 1 : undefined,
            }));
        }
    }
    return entries;
};
exports.deserializeNodeData = deserializeNodeData;
const serializeNodeData = (entries) => {
    const data = {
        l: null,
        e: [],
    };
    let i = 0;
    if (entries[0]?.isTree()) {
        i++;
        data.l = entries[0].pointer;
    }
    let lastKey = '';
    while (i < entries.length) {
        const leaf = entries[i];
        const next = entries[i + 1];
        if (!leaf.isLeaf()) {
            throw new Error('Not a valid node: two subtrees next to each other');
        }
        i++;
        let subtree = null;
        if (next?.isTree()) {
            subtree = next.pointer;
            i++;
        }
        (0, exports.ensureValidMstKey)(leaf.key);
        const prefixLen = (0, exports.countPrefixLen)(lastKey, leaf.key);
        data.e.push({
            p: prefixLen,
            k: uint8arrays.fromString(leaf.key.slice(prefixLen), 'ascii'),
            v: leaf.value,
            t: subtree,
        });
        lastKey = leaf.key;
    }
    return data;
};
exports.serializeNodeData = serializeNodeData;
const countPrefixLen = (a, b) => {
    let i;
    for (i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
            break;
        }
    }
    return i;
};
exports.countPrefixLen = countPrefixLen;
const cidForEntries = async (entries) => {
    const data = (0, exports.serializeNodeData)(entries);
    return (0, common_1.cidForCbor)(data);
};
exports.cidForEntries = cidForEntries;
const isValidMstKey = (str) => {
    const split = str.split('/');
    return (str.length <= 256 &&
        split.length === 2 &&
        split[0].length > 0 &&
        split[1].length > 0 &&
        (0, exports.isValidChars)(split[0]) &&
        (0, exports.isValidChars)(split[1]));
};
exports.isValidMstKey = isValidMstKey;
exports.validCharsRegex = /^[a-zA-Z0-9_\-:.]*$/;
const isValidChars = (str) => {
    return str.match(exports.validCharsRegex) !== null;
};
exports.isValidChars = isValidChars;
const ensureValidMstKey = (str) => {
    if (!(0, exports.isValidMstKey)(str)) {
        throw new InvalidMstKeyError(str);
    }
};
exports.ensureValidMstKey = ensureValidMstKey;
class InvalidMstKeyError extends Error {
    constructor(key) {
        super(`Not a valid MST key: ${key}`);
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: key
        });
    }
}
exports.InvalidMstKeyError = InvalidMstKeyError;
//# sourceMappingURL=util.js.map