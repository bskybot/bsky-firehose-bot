"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRecords = exports.getFullRepo = void 0;
const types_1 = require("../types");
const cid_set_1 = __importDefault(require("../cid-set"));
const error_1 = require("../error");
const util = __importStar(require("../util"));
const mst_1 = require("../mst");
// Full Repo
// -------------
const getFullRepo = (storage, commitCid) => {
    return util.writeCar(commitCid, async (car) => {
        const commit = await storage.readObjAndBytes(commitCid, types_1.def.commit);
        await car.put({ cid: commitCid, bytes: commit.bytes });
        const mst = mst_1.MST.load(storage, commit.obj.data);
        await mst.writeToCarStream(car);
    });
};
exports.getFullRepo = getFullRepo;
// Narrow slices
// -------------
const getRecords = (storage, commitCid, paths) => {
    return util.writeCar(commitCid, async (car) => {
        const commit = await storage.readObjAndBytes(commitCid, types_1.def.commit);
        await car.put({ cid: commitCid, bytes: commit.bytes });
        const mst = mst_1.MST.load(storage, commit.obj.data);
        const cidsForPaths = await Promise.all(paths.map((p) => mst.cidsForPath(util.formatDataKey(p.collection, p.rkey))));
        const allCids = cidsForPaths.reduce((acc, cur) => {
            return acc.addSet(new cid_set_1.default(cur));
        }, new cid_set_1.default());
        const found = await storage.getBlocks(allCids.toList());
        if (found.missing.length > 0) {
            throw new error_1.MissingBlocksError('writeRecordsToCarStream', found.missing);
        }
        for (const block of found.blocks.entries()) {
            await car.put(block);
        }
    });
};
exports.getRecords = getRecords;
//# sourceMappingURL=provider.js.map