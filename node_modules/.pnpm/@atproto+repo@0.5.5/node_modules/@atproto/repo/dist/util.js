"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureV3Commit = exports.cidForRecord = exports.cborToLexRecord = exports.cborToLex = exports.verifyCommitSig = exports.signCommit = exports.metaEqual = exports.formatDataKey = exports.parseDataKey = exports.ensureCreates = exports.diffToWriteDescripts = exports.readCarWithRoot = exports.readCarStream = exports.readCar = exports.carToBlocks = exports.blocksToCarFile = exports.blocksToCarStream = void 0;
exports.verifyIncomingCarBlocks = verifyIncomingCarBlocks;
exports.writeCarStream = writeCarStream;
exports.writeCar = writeCar;
const promises_1 = require("node:timers/promises");
const cbor = __importStar(require("@ipld/dag-cbor"));
const iterator_1 = require("@ipld/car/iterator");
const writer_1 = require("@ipld/car/writer");
const common_1 = require("@atproto/common");
const lexicon_1 = require("@atproto/lexicon");
const crypto = __importStar(require("@atproto/crypto"));
const types_1 = require("./types");
const block_map_1 = __importDefault(require("./block-map"));
async function* verifyIncomingCarBlocks(car) {
    for await (const block of car) {
        await (0, common_1.verifyCidForBytes)(block.cid, block.bytes);
        yield block;
    }
}
// we have to turn the car writer output into a stream in order to properly handle errors
function writeCarStream(root, fn) {
    const { writer, out } = root !== null ? writer_1.CarWriter.create(root) : writer_1.CarWriter.create();
    const stream = (0, common_1.byteIterableToStream)(out);
    fn(writer)
        .catch((err) => {
        stream.destroy(err);
    })
        .finally(() => writer.close());
    return stream;
}
async function* writeCar(root, fn) {
    const stream = writeCarStream(root, fn);
    for await (const chunk of stream) {
        yield chunk;
    }
}
const blocksToCarStream = (root, blocks) => {
    return writeCar(root, async (writer) => {
        for (const entry of blocks.entries()) {
            await writer.put(entry);
        }
    });
};
exports.blocksToCarStream = blocksToCarStream;
const blocksToCarFile = (root, blocks) => {
    const carStream = (0, exports.blocksToCarStream)(root, blocks);
    return (0, common_1.streamToBuffer)(carStream);
};
exports.blocksToCarFile = blocksToCarFile;
const carToBlocks = async (car) => {
    const roots = await car.getRoots();
    const blocks = new block_map_1.default();
    for await (const block of verifyIncomingCarBlocks(car)) {
        blocks.set(block.cid, block.bytes);
        // break up otherwise "synchronous" work in car parsing
        await (0, promises_1.setImmediate)();
    }
    return {
        roots,
        blocks,
    };
};
exports.carToBlocks = carToBlocks;
const readCar = async (bytes) => {
    const car = await iterator_1.CarBlockIterator.fromBytes(bytes);
    return (0, exports.carToBlocks)(car);
};
exports.readCar = readCar;
const readCarStream = async (stream) => {
    const car = await iterator_1.CarBlockIterator.fromIterable(stream);
    return (0, exports.carToBlocks)(car);
};
exports.readCarStream = readCarStream;
const readCarWithRoot = async (bytes) => {
    const { roots, blocks } = await (0, exports.readCar)(bytes);
    if (roots.length !== 1) {
        throw new Error(`Expected one root, got ${roots.length}`);
    }
    const root = roots[0];
    return {
        root,
        blocks,
    };
};
exports.readCarWithRoot = readCarWithRoot;
const diffToWriteDescripts = (diff) => {
    return Promise.all([
        ...diff.addList().map(async (add) => {
            const { collection, rkey } = (0, exports.parseDataKey)(add.key);
            return {
                action: types_1.WriteOpAction.Create,
                collection,
                rkey,
                cid: add.cid,
            };
        }),
        ...diff.updateList().map(async (upd) => {
            const { collection, rkey } = (0, exports.parseDataKey)(upd.key);
            return {
                action: types_1.WriteOpAction.Update,
                collection,
                rkey,
                cid: upd.cid,
                prev: upd.prev,
            };
        }),
        ...diff.deleteList().map((del) => {
            const { collection, rkey } = (0, exports.parseDataKey)(del.key);
            return {
                action: types_1.WriteOpAction.Delete,
                collection,
                rkey,
                cid: del.cid,
            };
        }),
    ]);
};
exports.diffToWriteDescripts = diffToWriteDescripts;
const ensureCreates = (descripts) => {
    const creates = [];
    for (const descript of descripts) {
        if (descript.action !== types_1.WriteOpAction.Create) {
            throw new Error(`Unexpected action: ${descript.action}`);
        }
        else {
            creates.push(descript);
        }
    }
    return creates;
};
exports.ensureCreates = ensureCreates;
const parseDataKey = (key) => {
    const parts = key.split('/');
    if (parts.length !== 2)
        throw new Error(`Invalid record key: ${key}`);
    return { collection: parts[0], rkey: parts[1] };
};
exports.parseDataKey = parseDataKey;
const formatDataKey = (collection, rkey) => {
    return collection + '/' + rkey;
};
exports.formatDataKey = formatDataKey;
const metaEqual = (a, b) => {
    return a.did === b.did && a.version === b.version;
};
exports.metaEqual = metaEqual;
const signCommit = async (unsigned, keypair) => {
    const encoded = cbor.encode(unsigned);
    const sig = await keypair.sign(encoded);
    return {
        ...unsigned,
        sig,
    };
};
exports.signCommit = signCommit;
const verifyCommitSig = async (commit, didKey) => {
    const { sig, ...rest } = commit;
    const encoded = cbor.encode(rest);
    return crypto.verifySignature(didKey, encoded, sig);
};
exports.verifyCommitSig = verifyCommitSig;
const cborToLex = (val) => {
    return (0, lexicon_1.ipldToLex)((0, common_1.cborDecode)(val));
};
exports.cborToLex = cborToLex;
const cborToLexRecord = (val) => {
    const parsed = (0, exports.cborToLex)(val);
    if (!common_1.check.is(parsed, common_1.schema.map)) {
        throw new Error('lexicon records be a json object');
    }
    return parsed;
};
exports.cborToLexRecord = cborToLexRecord;
const cidForRecord = async (val) => {
    return (0, common_1.cidForCbor)((0, lexicon_1.lexToIpld)(val));
};
exports.cidForRecord = cidForRecord;
const ensureV3Commit = (commit) => {
    if (commit.version === 3) {
        return commit;
    }
    else {
        return {
            ...commit,
            version: 3,
            rev: commit.rev ?? common_1.TID.nextStr(),
        };
    }
};
exports.ensureV3Commit = ensureV3Commit;
//# sourceMappingURL=util.js.map